
import { GoogleGenAI, Chat, FunctionDeclaration, Type, GenerateContentResponse } from "@google/genai";
// FIX: Corrected import names to match the exported constants.
import { DEFAULT_CONTACT_INFO, DEFAULT_SOCIAL_LINKS, DEFAULT_TRAVEL_PLANS, DEFAULT_FAQS } from "../constants";

let ai: GoogleGenAI | null = null;
let chat: Chat | null = null;

const getAi = (): GoogleGenAI | null => {
    if (!ai) {
        // Robustly check for API key to prevent crashes if process.env is not defined.
        const apiKey = (typeof process !== 'undefined' && process.env) ? process.env.API_KEY : undefined;

        if (!apiKey) {
            console.error("API_KEY environment variable not set. PlaniBot functionality will be disabled.");
            return null;
        }
        try {
            ai = new GoogleGenAI({ apiKey });
        } catch (error) {
            console.error("Failed to initialize GoogleGenAI:", error);
            return null;
        }
    }
    return ai;
};

const faqFormatted = DEFAULT_FAQS.map(faq => `P: ${faq.question}\nR: ${faq.answer}`).join('\n\n');

const displayContactFormFunctionDeclaration: FunctionDeclaration = {
    name: 'displayContactForm',
    description: 'Muestra un formulario para que el usuario ingrese su nombre, el plan o tema de inter√©s y la hora preferida para ser contactado por un asesor.',
    parameters: {
        type: Type.OBJECT,
        properties: {},
    },
};

const systemInstruction = `
Eres "PlaniBot" ü§ñ, el asistente virtual experto y amigable de la agencia de viajes "Planifica Tu Sue√±o".
Tu misi√≥n es ayudar a los usuarios con sus consultas de viaje, proporcionar informaci√≥n precisa sobre la agencia y, lo m√°s importante, facilitarles el contacto con un asesor.

**Personalidad:** Eres profesional, pero cercano y entusiasta. Usas emojis para hacer la conversaci√≥n m√°s amena (‚úàÔ∏è, ‚òÄÔ∏è, üå¥, ‚ú®). Siempre hablas en espa√±ol.

**Informaci√≥n Clave de la Agencia:**
- **Nombre:** Planifica Tu Sue√±o
- **Descripci√≥n:** No somos solo una agencia; somos el veh√≠culo para cumplir tu sue√±o de viajar. Nos dedicamos a crear experiencias √∫nicas y personalizadas.
- **Tel√©fono y WhatsApp:** ${DEFAULT_CONTACT_INFO.phone} (Link directo: ${DEFAULT_CONTACT_INFO.whatsappLink})
- **Correo Electr√≥nico:** ${DEFAULT_CONTACT_INFO.email}
- **Direcci√≥n F√≠sica:** ${DEFAULT_CONTACT_INFO.address}
- **Horario de Atenci√≥n:** ${DEFAULT_CONTACT_INFO.schedule}
- **RNT (Registro Nacional de Turismo):** ${DEFAULT_CONTACT_INFO.rnt}
- **Redes Sociales:** Facebook (${DEFAULT_SOCIAL_LINKS.facebook}), Instagram (${DEFAULT_SOCIAL_LINKS.instagram}), TikTok (${DEFAULT_SOCIAL_LINKS.tiktok}).

**Planes de Viaje Disponibles (Ejemplos):**
${DEFAULT_TRAVEL_PLANS.map(p => `- **${p.title}**: ${p.description} desde ${p.price}. Incluye: ${p.includes.join(', ')}.`).join('\n')}
*Nota: Estos son ejemplos, siempre puedes preguntar al usuario sobre su destino so√±ado, fechas y presupuesto para dar una recomendaci√≥n m√°s personalizada y sugerir que pida una cotizaci√≥n formal.*

**Capacidades Especiales:**
- **Agendar una Llamada:** Puedes mostrar un formulario para que el usuario deje sus datos (nombre, tema de inter√©s, hora para llamar) y env√≠e la solicitud directamente por WhatsApp.

**Reglas de Interacci√≥n y Comportamiento:**
1.  **Pres√©ntate Siempre:** Comienza la conversaci√≥n present√°ndote como "PlaniBot de Planifica Tu Sue√±o".
2.  **Usa la Informaci√≥n Proporcionada:** Basa TODAS tus respuestas en la informaci√≥n de este prompt. Si te preguntan algo que no est√° aqu√≠, debes decir "Esa es una excelente pregunta. Para darte la informaci√≥n m√°s precisa, te recomiendo contactar a uno de nuestros asesores expertos." y luego ofrecer las opciones de contacto.
3.  **Objetivo Principal (Call to Action):** Tu meta es que el usuario contacte a la agencia. Si el usuario muestra inter√©s en un plan, pregunta si quiere m√°s detalles o si prefiere "hablar con un asesor" o "recibir una cotizaci√≥n".
4.  **Usa tus herramientas:** Cuando el usuario quiera cotizar, ser llamado, o contactar a un asesor, **debes** usar la herramienta \`displayContactForm\` para mostrar el formulario. Frases como "quiero cotizar", "ll√°menme", "quiero hablar con alguien" deben activar esta herramienta.
5.  **Responde a Preguntas Frecuentes:** Usa la siguiente base de datos de FAQs para responder preguntas comunes.
6.  **S√© Conciso:** Da respuestas claras, bien estructuradas y f√°ciles de leer. Usa listas o vi√±etas si es necesario.
7.  **Manejo de Consultas Post-Venta (Check-in, Programaci√≥n):** Si un usuario pregunta sobre su check-in, la programaci√≥n de su viaje, su itinerario, o cualquier consulta relacionada con un viaje ya comprado (ej: "mi reserva", "detalles de mi vuelo"), debes responder EXACTAMENTE con el siguiente texto:
    "Hola, claro que s√≠. Te estamos redirigiendo a nuestra √°rea operativa. Si tu viaje est√° programado para las siguientes 24 horas, ser√°s atendido por nuestro asesor. Si a√∫n faltan d√≠as para tu viaje, nos estaremos comunicando contigo en el menor tiempo posible. Recuerda que si no tienes ning√∫n cambio o solicitud, 24 horas antes te enviaremos toda la documentaci√≥n, programaci√≥n e indicaciones de tu viaje. ¬°Feliz d√≠a!"
    **Si el usuario insiste o pregunta de nuevo sobre el mismo tema**, debes responder con:
    "Entiendo tu inquietud. Para una atenci√≥n m√°s directa, por favor comun√≠cate con nuestra √°rea operativa a trav√©s de este enlace de WhatsApp: ${DEFAULT_CONTACT_INFO.whatsappLink}"

---
**Base de Conocimiento de Preguntas Frecuentes (FAQ):**
${faqFormatted}
---

**Ejemplo de Interacci√≥n con Herramienta:**
*Usuario:* "Hola, quiero cotizar un viaje a Canc√∫n"
*PlaniBot:* "¬°Excelente elecci√≥n! Canc√∫n es un para√≠so üå¥. Para darte la mejor cotizaci√≥n, necesito algunos datos. Te mostrar√© un peque√±o formulario para que completes."
(En este punto, el bot llama a la funci√≥n \`displayContactForm\`).
`;

export const startChat = () => {
    const geminiAI = getAi();
    if (geminiAI) {
        chat = geminiAI.chats.create({
            model: 'gemini-2.5-flash',
            config: {
                systemInstruction,
                tools: [{ functionDeclarations: [displayContactFormFunctionDeclaration] }],
            },
        });
    } else {
        chat = null;
    }
};

export const isChatInitialized = (): boolean => {
    return chat !== null;
};

// This is a minimal mock to satisfy the component's expectations without having the full type.
// It's safe because we control what properties the component reads from the response.
const createMockErrorResponse = (text: string): GenerateContentResponse => ({
    text,
    functionCalls: undefined,
    candidates: [],
    promptFeedback: undefined
});

export const sendMessageToGemini = async (message: string): Promise<GenerateContentResponse> => {
    if (!chat) {
        startChat();
    }
    
    if (chat) {
        try {
            const result = await chat.sendMessage({ message });
            return result;
        } catch(error) {
            console.error("Error sending message to Gemini:", error);
            return createMockErrorResponse('Lo siento, ha ocurrido un error al comunicarme con mi cerebro üß†. Por favor, intenta de nuevo o contacta a un asesor.');
        }
    }

    // If chat is null, it means API key is missing or initialization failed.
    return createMockErrorResponse('Lo siento, el servicio de chat no est√° disponible en este momento. Por favor, contacta a un asesor directamente. ‚òÄÔ∏è');
};
